const String headerPart = '''
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unnecessary_brace_in_string_interps

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  static S current;
  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();
  static S of(BuildContext context) => Localizations.of<S>(context, S);
  static S forLanguage(String language) => _langMap.containsKey(language) ? _langMap[language]() : _defaultLanguage;
  static Set<String> get languages => _langMap.keys.toSet();
  static Map<String, Function>_langMap = {
''';

const String middlePart = '''
}

class \$defLang_ extends S {}
''';

const String footerPart1 = '''
class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return <Locale>[
''';

const String footerPart2 = '''    ];
  }
  
  LocaleListResolutionCallback listResolution({Locale fallback = _defaultLocale, bool withCountry = false}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return _getFallback(fallback, supported.first);
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback = _defaultLocale, bool withCountry = false}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = _getLang(locale);
    S.current = S.forLanguage(lang);
    return SynchronousFuture<S>(S.current);
   }
''';

const String footerPart3 = '''

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return _getFallback(fallback, supported.first);
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = _getFallback(fallback, supported.first);
      return fallbackLocale;
    }
  }

  Locale _getFallback(Locale fallback, Locale firstInList) {
    return fallback ?? firstInList;
  }
  
  ///
  /// Returns true since we can always provide a translation
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    return true;
  }
}

String _getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
''';
